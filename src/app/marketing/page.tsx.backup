"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import { Users, FileText, DollarSign, Target, RefreshCw, Download, Calendar } from "lucide-react";

import MetricCard from "@/components/marketing/MetricCard";
import KpiCard from "@/components/marketing/KpiCard";
import SourceCard from "@/components/marketing/SourceCard";
import RevenueBySourceChart from "@/components/marketing/RevenueBySourceChart";
import LeadsOverTimeChart from "@/components/marketing/LeadsOverTimeChart";
import ConversionFunnel from "@/components/marketing/ConversionFunnel";
import DrilldownModal from "@/components/marketing/DrilldownModal";
import { Skeleton } from "@/components/ui/skeleton";
import { exportMarketingSummary, exportFunnelData } from "@/lib/exportUtils";
import CustomerJourneyFunnel from "@/components/marketing/CustomerJourneyFunnel";

export default function MarketingPage() {
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [mounted, setMounted] = useState(false);
  
  // Date range state
  const [selectedPeriod, setSelectedPeriod] = useState("30d");
  const [customRange, setCustomRange] = useState({ from: "", to: "" });
  const [marketingData, setMarketingData] = useState<typeof mockData | null>(null);
  
  // Drilldown modal state
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedSource, setSelectedSource] = useState<string>("");
  const [drilldownData, setDrilldownData] = useState<Array<{ campaign: string; leads: number; quotes: number; revenue: number; costPerLead?: number }>>([]);
  const [drilldownTimeSeries, setDrilldownTimeSeries] = useState<Array<{ date: string; leads: number }>>([]);

  useEffect(() => setMounted(true), []);

  // Calculate date range based on selected period
  const getDateRange = useCallback(() => {
    const now = new Date();
    const to = now.toISOString().split('T')[0];
    
    if (selectedPeriod === "custom") {
      return { from: customRange.from, to: customRange.to };
    }
    
    const from = new Date();
    switch (selectedPeriod) {
      case "7d":
        from.setDate(now.getDate() - 7);
        break;
      case "30d":
        from.setDate(now.getDate() - 30);
        break;
      case "90d":
        from.setDate(now.getDate() - 90);
        break;
      case "12m":
        from.setMonth(now.getMonth() - 12);
        break;
      default:
        from.setDate(now.getDate() - 30);
    }
    
    return { from: from.toISOString().split('T')[0], to };
  }, [selectedPeriod, customRange.from, customRange.to]);

  const mockData = useMemo(() => ({
    totals: {
      leads: 145,
      quotes: 42,
      orders: 18,
      amount: 28500,
      previousLeads: 128,
      previousQuotes: 38,
      previousRevenue: 24200,
    },
    bySource: {
      google: { leads: 68, quotes: 22, revenue: 15800, color: "#F4B400" },
      facebook: { leads: 35, quotes: 12, revenue: 8200, color: "#1877F2" },
      direct: { leads: 28, quotes: 6, revenue: 3200, color: "#10B981" },
      other: { leads: 14, quotes: 2, revenue: 1300, color: "#6B7280" },
    },
  }), []);

  // Fetch marketing data from API
  const fetchMarketingData = useCallback(async () => {
    setIsLoading(true);
    try {
      const { from, to } = getDateRange();
      const response = await fetch(`/api/marketing/summary?from=${from}&to=${to}`);
      if (response.ok) {
        const data = await response.json();
        setMarketingData(data);
      } else {
        console.error('Failed to fetch marketing data');
        // Fall back to mock data
        setMarketingData(mockData);
      }
    } catch (error) {
      console.error('Error fetching marketing data:', error);
      // Fall back to mock data
      setMarketingData(mockData);
    } finally {
      setIsLoading(false);
      setLastUpdated(new Date());
    }
  }, [getDateRange, mockData]);

  // Fetch data when date range changes
  useEffect(() => {
    if (mounted) {
      fetchMarketingData();
    }
  }, [selectedPeriod, customRange.from, customRange.to, mounted, fetchMarketingData]);

  const timeSeriesData = [
    { date: "Week 1", google: 12, facebook: 8, direct: 5, other: 2 },
    { date: "Week 2", google: 18, facebook: 6, direct: 7, other: 4 },
    { date: "Week 3", google: 15, facebook: 12, direct: 8, other: 3 },
    { date: "Week 4", google: 23, facebook: 9, direct: 8, other: 5 },
  ];

  // Use fetched data or fall back to mock data
  const data = marketingData || mockData;
  
  const pieData = Object.entries(data.bySource).map(([key, sourceData]) => ({
    name: key.charAt(0).toUpperCase() + key.slice(1),
    value: (sourceData as { revenue: number; color: string }).revenue,
    color: (sourceData as { revenue: number; color: string }).color,
  }));


  const refreshData = async () => {
    await fetchMarketingData();
  };

  // Fetch drilldown data for a specific source
  const fetchDrilldownData = useCallback(async (source: string) => {
    try {
      const { from, to } = getDateRange();
      const response = await fetch(`/api/marketing/summary?from=${from}&to=${to}&source=${source}`);
      if (response.ok) {
        const data = await response.json();
        setDrilldownData(data.campaigns || []);
        setDrilldownTimeSeries(data.timeSeries || []);
      } else {
        console.error('Failed to fetch drilldown data');
        // Fall back to mock data
        setDrilldownData(getMockDrilldownData(source));
        setDrilldownTimeSeries(getMockTimeSeriesData());
      }
    } catch (error) {
      console.error('Error fetching drilldown data:', error);
      // Fall back to mock data
      setDrilldownData(getMockDrilldownData(source));
      setDrilldownTimeSeries(getMockTimeSeriesData());
    }
  }, [getDateRange]);

  // Mock drilldown data for demonstration
  const getMockDrilldownData = (source: string) => {
    const mockCampaigns = {
      google: [
        { campaign: "Google Ads - Windows", leads: 25, quotes: 8, revenue: 4500, costPerLead: 35 },
        { campaign: "Google Ads - Doors", leads: 20, quotes: 6, revenue: 3800, costPerLead: 42 },
        { campaign: "Google Shopping", leads: 15, quotes: 5, revenue: 3200, costPerLead: 28 },
        { campaign: "Google Display", leads: 8, quotes: 3, revenue: 1800, costPerLead: 55 },
      ],
      facebook: [
        { campaign: "Facebook Lead Ads", leads: 15, quotes: 4, revenue: 2400, costPerLead: 38 },
        { campaign: "Facebook Carousel", leads: 12, quotes: 3, revenue: 1800, costPerLead: 45 },
        { campaign: "Facebook Video", leads: 8, quotes: 5, revenue: 3000, costPerLead: 52 },
      ],
      direct: [
        { campaign: "Direct Website", leads: 20, quotes: 4, revenue: 2200, costPerLead: 0 },
        { campaign: "Direct Referral", leads: 8, quotes: 2, revenue: 1000, costPerLead: 0 },
      ],
      other: [
        { campaign: "Email Marketing", leads: 8, quotes: 1, revenue: 800, costPerLead: 15 },
        { campaign: "Organic Search", leads: 6, quotes: 1, revenue: 500, costPerLead: 0 },
      ],
    };
    return mockCampaigns[source as keyof typeof mockCampaigns] || [];
  };

  const getMockTimeSeriesData = () => {
    return [
      { date: "Week 1", leads: 12 },
      { date: "Week 2", leads: 18 },
      { date: "Week 3", leads: 15 },
      { date: "Week 4", leads: 23 },
    ];
  };

  // Generate sparkline data for each source
  const getSparklineData = (source: string) => {
    const baseData = {
      google: [12, 18, 15, 23, 20, 25, 22],
      facebook: [8, 12, 10, 15, 18, 14, 16],
      direct: [5, 8, 6, 10, 12, 9, 11],
      other: [3, 5, 4, 7, 8, 6, 7]
    };
    
    const values = baseData[source as keyof typeof baseData] || [5, 8, 6, 10, 12, 9, 11];
    return values.map((leads, index) => ({
      date: `W${index + 1}`,
      leads
    }));
  };

  // Handle source card click
  const handleSourceClick = async (source: string) => {
    setSelectedSource(source);
    setIsModalOpen(true);
    await fetchDrilldownData(source);
  };

  // Close modal
  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedSource("");
    setDrilldownData([]);
    setDrilldownTimeSeries([]);
  };

  // Handle CSV export
  const handleExportCSV = () => {
    if (data) {
      const { from, to } = getDateRange();
      exportMarketingSummary(data.bySource, { ...data.totals, revenue: data.totals.amount }, { from, to });
    }
  };

  // Create conversion funnel steps (for ConversionFunnel component)
  const conversionFunnelSteps = useMemo(() => {
    if (!marketingData) return [];
    
    const data = marketingData;
    return [
      { 
        label: "Leads Generated", 
        value: data.totals.leads, 
        color: "#10B981",
        width: "100%"
      },
      { 
        label: "Quotes Requested", 
        value: data.totals.quotes, 
        color: "#8B5CF6",
        width: `${(data.totals.quotes / data.totals.leads * 100).toFixed(1)}%`
      },
    ];
  }, [marketingData]);

  // Create customer journey funnel steps (for CustomerJourneyFunnel component)
  const customerJourneySteps = useMemo(() => {
    if (!marketingData) return [];
    
    const data = marketingData;
    return [
      { 
        label: "Website Visitors", 
        value: Math.floor(data.totals.leads * 15), // Estimate visitors from leads
        color: "#3B82F6" 
      },
      { 
        label: "Leads Generated", 
        value: data.totals.leads, 
        color: "#10B981" 
      },
      { 
        label: "Quotes Requested", 
        value: data.totals.quotes, 
        color: "#8B5CF6" 
      },
      { 
        label: "Orders Won", 
        value: data.totals.orders, 
        color: "#F59E0B" 
      },
      { 
        label: "Revenue", 
        value: data.totals.amount, 
        color: "#EF4444" 
      },
    ];
  }, [marketingData]);

  return (
    <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 space-y-4 md:space-y-0">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Marketing Dashboard</h1>
            <p className="text-gray-600">Attribution and performance metrics</p>
            <p className="text-sm text-gray-500 mt-2">
              Last updated: {mounted ? lastUpdated.toLocaleString() : ""}
            </p>
          </div>
          <div className="flex flex-wrap items-center space-x-4">
            {/* Date Range Selector */}
            <div className="flex items-center space-x-2">
              <Calendar className="w-4 h-4 text-gray-500" />
              <select
                value={selectedPeriod}
                onChange={(e) => setSelectedPeriod(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
                <option value="90d">Last 90 Days</option>
                <option value="12m">Last 12 Months</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            
            {/* Custom Date Inputs */}
            {selectedPeriod === "custom" && (
              <div className="flex items-center space-x-2">
                <input
                  type="date"
                  value={customRange.from}
                  onChange={(e) => setCustomRange({ ...customRange, from: e.target.value })}
                  className="border border-gray-300 rounded-lg px-2 py-2"
                />
                <span className="text-gray-500">to</span>
                <input
                  type="date"
                  value={customRange.to}
                  onChange={(e) => setCustomRange({ ...customRange, to: e.target.value })}
                  className="border border-gray-300 rounded-lg px-2 py-2"
                />
              </div>
            )}
            
            {/* Action Buttons */}
            <button
              onClick={refreshData}
              disabled={isLoading}
              className="flex items-center space-x-2 px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? "animate-spin" : ""}`} />
              <span>Refresh</span>
            </button>
            <button 
              onClick={handleExportCSV}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Download className="w-4 h-4" />
              <span>Export CSV</span>
            </button>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {mounted ? (
            <>
              <MetricCard title="Total Leads" value={data.totals.leads} previousValue={data.totals.previousLeads} icon={Users} />
              <MetricCard title="Total Quotes" value={data.totals.quotes} previousValue={data.totals.previousQuotes} icon={FileText} />
              <MetricCard title="Total Revenue" value={data.totals.amount} previousValue={data.totals.previousRevenue} icon={DollarSign} format="currency" />
            </>
          ) : (
            <>
              <Skeleton className="h-32 rounded-lg" />
              <Skeleton className="h-32 rounded-lg" />
              <Skeleton className="h-32 rounded-lg" />
            </>
          )}
        </div>

        {/* Additional KPIs */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          {mounted ? (
            <>
              <KpiCard title="Conversion Rate" value={`${((data.totals.quotes / data.totals.leads) * 100).toFixed(1)}%`} icon={Target} colorClass="text-purple-600" />
              <KpiCard title="Avg Quote Value" value={`$${(data.totals.amount / data.totals.quotes).toFixed(2)}`} icon={DollarSign} colorClass="text-green-600" />
              <KpiCard title="Cost Per Lead" value="$45" icon={Users} colorClass="text-blue-600" />
              <KpiCard title="ROI" value="312%" icon={RefreshCw} colorClass="text-orange-600" />
            </>
          ) : (
            <>
              <Skeleton className="h-24 rounded-lg" />
              <Skeleton className="h-24 rounded-lg" />
              <Skeleton className="h-24 rounded-lg" />
              <Skeleton className="h-24 rounded-lg" />
            </>
          )}
        </div>

        {/* Charts */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          {mounted ? (
            <>
              <RevenueBySourceChart data={pieData} />
              <LeadsOverTimeChart data={timeSeriesData} />
            </>
          ) : (
            <>
              <Skeleton className="h-80 rounded-lg" />
              <Skeleton className="h-80 rounded-lg" />
            </>
          )}
        </div>

        {/* Performance by Source */}
        <div className="mb-8">
          <h3 className="text-xl font-semibold text-gray-900 mb-4">Performance by Source</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {Object.entries(data.bySource).map(([source, sourceData]) =>
              mounted ? (
                <SourceCard 
                  key={source} 
                  source={source} 
                  data={{ ...sourceData, color: sourceData.color || "#6B7280" } as { leads: number; quotes: number; revenue?: number; amount?: number; color: string }} 
                  totalRevenue={data.totals.amount}
                  onClick={() => handleSourceClick(source)}
                  sparklineData={getSparklineData(source)}
                />
              ) : (
                <Skeleton key={source} className="h-40 rounded-lg" />
              )
            )}
          </div>
        </div>

        {/* Conversion Funnel */}
        {mounted ? <ConversionFunnel steps={conversionFunnelSteps} /> : <div className="bg-gray-100 rounded-lg h-40 animate-pulse" />}

        {/* Customer Journey Funnel */}
        <div className="mt-8">
          {mounted ? (
            <CustomerJourneyFunnel 
              steps={customerJourneySteps} 
              dateRange={getDateRange()}
              onExport={() => {
                if (customerJourneySteps.length > 0) {
                  const { from, to } = getDateRange();
                  exportFunnelData(customerJourneySteps, { from, to });
                }
              }}
            />
          ) : (
            <div className="bg-gray-100 rounded-lg h-40 animate-pulse" />
          )}
        </div>
      </div>

      {/* Drilldown Modal */}
      <DrilldownModal
        open={isModalOpen}
        onClose={handleCloseModal}
        source={selectedSource}
        data={drilldownData}
        timeSeriesData={drilldownTimeSeries}
        dateRange={getDateRange()}
      />
    </div>
  );
}
