"use client";

import React from "react";
import { Badge } from "@/components/ui/badge";

type AnyRec = Record<string, any>;

type Props = {
  /** Full items array from the quote */
  items: AnyRec[];
  /** Salesperson note (printed on every page) */
  pdfNote?: string;
  /** STANDARD_QUOTE_BLURB (printed on every page) */
  standardBlurb: string;
};

/**
 * Renders one printable page per item with a left/center/right layout.
 * - Left (narrow): colors, hardware, glass, opening
 * - Center (wide): core dimensions/specs
 * - Right (narrow): salesperson note + standard blurb
 *
 * Print behavior (scoped in globals.css):
 * - Each page root has class "print-page" (forced page breaks in print).
 * - 3-column structure via ".print-grid" (≈22/56/22).
 * - ".print-avoid-break" reduces splits across pages.
 */
export default function QuotePrintLayoutPreview({
  items,
  pdfNote = "",
  standardBlurb,
}: Props) {
  if (!Array.isArray(items) || items.length === 0) return null;

  return (
    <div id="quote-pdf-root" aria-label="Quote Print Layout Preview (All Items)">
      {items.map((item, idx) => (
        <PrintableItemPage
          key={String((item as AnyRec)?.id ?? idx)}
          item={item as AnyRec}
          index={idx}
          pdfNote={pdfNote}
          standardBlurb={standardBlurb}
        />
      ))}
    </div>
  );
}

function PrintableItemPage({
  item,
  index,
  pdfNote,
  standardBlurb,
}: {
  item: AnyRec;
  index: number;
  pdfNote: string;
  standardBlurb: string;
}) {
  const product = (item?.product as AnyRec) ?? {};
  const colors = (item?.colors as AnyRec) ?? {};
  const glazing = (item?.glazing as AnyRec) ?? {};

  const widthIn = product?.widthIn;
  const heightIn = product?.heightIn;
  const dims = widthIn && heightIn ? `${widthIn}" x ${heightIn}"` : "—";

  const clearOpenW = product?.clearOpeningWidthIn;
  const clearOpenH = product?.clearOpeningHeightIn;
  const clearOpen =
    clearOpenW && clearOpenH ? `${clearOpenW}" x ${clearOpenH}"` : "—";

  const roW = product?.recommendedRoughOpenWidthIn;
  const roH = product?.recommendedRoughOpenHeightIn;
  const recRoughOpen = roW && roH ? `${roW}" x ${roH}"` : "—";

  const qty = item?.quantity ?? product?.quantity ?? "—";

  const leftSpecs = [
    { label: "Exterior Color", value: colors?.exterior?.name ?? "—" },
    {
      label: "Interior Color",
      value: colors?.isSame ? "Same as Ext." : colors?.interior?.name ?? "—",
    },
    {
      label: "Hardware",
      value: item?.hardwareFinish ?? product?.hardwareFinish ?? "—",
    },
    { label: "Glass Type", value: glazing?.tint ?? glazing?.type ?? "—" },
    { label: "Glazing", value: glazing?.paneCount ?? "—" },
    { label: "Opens", value: product?.swing ?? product?.operating ?? "—" },
  ];

  const centerSpecs = [
    { label: "Dimensions", value: dims },
    { label: "Configuration", value: product?.configuration ?? "—" },
    { label: "Quantity", value: qty },
    { label: "Clear Opening", value: clearOpen },
    { label: "Recommended RO", value: recRoughOpen },
    { label: "Panel Size", value: product?.panelSizeIn ?? "—" },
  ];

  const productType = product?.type ?? "Product";
  const roomName = item?.roomName ?? "";

  return (
    <article
      className="print-page rounded-xl border border-slate-200/80 bg-white shadow-sm"
      aria-label={`Printable page for Item ${String.fromCharCode(65 + index)}`}
    >
      {/* Page header */}
      <header className="flex items-center justify-between px-6 pt-6 pb-4">
        <h3 className="text-base font-semibold text-slate-900">
          Item {String.fromCharCode(65 + index)} — {productType}
          {roomName ? ` · ${roomName}` : ""}
        </h3>
        <Badge className="screen-only bg-slate-100 text-slate-700 font-semibold">
          Print Preview
        </Badge>
      </header>

      {/* 3-column print grid */}
      <div className="print-grid p-6">
        {/* LEFT (narrow) */}
        <section
          className="print-avoid-break"
          aria-label="Left column: finishes & options"
        >
          <div className="space-y-3">
            {leftSpecs.map((s) => (
              <Spec
                key={s.label}
                label={s.label}
                value={s.value as string | number}
              />
            ))}
          </div>
        </section>

        {/* CENTER (wide) */}
        <section
          className="print-avoid-break"
          aria-label="Center column: core specs"
        >
          <div className="grid grid-cols-2 gap-4">
            {centerSpecs.map((s) => (
              <Spec
                key={s.label}
                label={s.label}
                value={s.value as string | number}
              />
            ))}
          </div>
        </section>

        {/* RIGHT (narrow) */}
        <section
          className="print-avoid-break"
          aria-label="Right column: notes & blurb"
        >
          <div className="text-[11px] uppercase tracking-wide text-slate-500 font-semibold mb-1">
            Salesperson Note
          </div>
          <div className="text-sm mb-4 whitespace-pre-wrap">
            {pdfNote.trim() ? pdfNote : "—"}
          </div>

          <div className="h-px bg-slate-200 my-4" />

          <div className="text-[11px] uppercase tracking-wide text-slate-500 font-semibold mb-1">
            Standard Blurb
          </div>
          <div className="text-xs text-slate-700 whitespace-pre-wrap leading-relaxed">
            {standardBlurb}
          </div>
        </section>
      </div>
    </article>
  );
}

function Spec({ label, value }: { label: string; value: string | number }) {
  return (
    <div className="text-sm">
      <div className="text-[11px] uppercase tracking-wide text-slate-500 font-semibold">
        {label}
      </div>
      <div className="font-medium text-slate-900">{value}</div>
    </div>
  );
}
